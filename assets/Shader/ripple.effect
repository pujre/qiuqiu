/**
 ** 创建人: zt
 ** 日  期: 2020.3.12
 ** 版  本: 1.0
 ** 描  述: shader
        波纹shader：
*/

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%
 
 
CCProgram vs %{
  precision highp float;
 
  #include <cc-global>
  #include <cc-local>
 
  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;
 
  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif
 
  void main () {
    vec4 pos = vec4(a_position, 1);
 
    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif
 
    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif
 
    v_color = a_color;
 
    gl_Position = pos;
  }
}%

 
 
CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
 
  in vec4 v_color;
  uniform ARGS {
    vec2 iResolution;
    float time;
  }


  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);
    float x = (v_uv0.x - time*0.1);
    float y = (v_uv0.y - time*0.1);
    x = clamp(x - floor(x), 0.0, 1.0);
    y = clamp(y - floor(y), 0.0, 1.0);
    vec2 uv = vec2( x , y);
    // vec2 uv = vec2( x , sin(time/ 0.1));
    //uv += vec2(x,0.05 * sin(uv.x * 10. + time * 3.));
    #if USE_TEXTURE
      o *= texture(texture, uv);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, uv + vec2(0, 0.5)).r;
      #endif
    #endif
    o *= v_color;
    // ALPHA_TEST(o)
    gl_FragColor = o;
     //gl_FragColor = o;
  }
}%
